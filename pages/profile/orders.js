import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import styles from 'styles/profile/orders.module.css'
import AuthenticatedRoute from '@/components/authenticatedRoute'
import Order from '@/components/Order'
import OrderWrapper from '@/components/orderWrapper'

import nookies from 'nookies'
import Cookie from 'cookie-cutter'
import useAxiosPrivate from '@/hooks/useAxiosPrivate'
import {useState, useEffect} from 'react'
import {BsClipboardX} from 'react-icons/bs'

export default function Orders({user}) {

  const [show, setShow] = useState(false)
  const [current, setCurrent] = useState({})

  const axiosPriv = useAxiosPrivate()

  const [orders, setOrders] = useState([])
  const [orderMap, setOrderMap] = useState([])

  const [info, setInfo] = useState()

  useEffect(()=>{

    const fetchStats = async (token)=>{

      await axiosPriv.get('/user/get-orders').then(res=>res.data)
      .then(data =>{
        console.log({data})
        setOrders(data.all)
        setOrderMap(data.map)
      })

    }

    fetchStats()

  },[])


  return (
    <AuthenticatedRoute>
      <div>
        <Head>
          <title>Profile</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <main className={!show ? styles.container : [styles.container, styles.show].join(" ")}>
          <div className={styles.list}>         
            <p className={styles.title}>Orders</p>
            <p className={styles.subtitle}>All completed orders</p>

            {(orderMap.length > 0 && orders.length > 0) ? orderMap.map((map)=>(
              <OrderWrapper order={map} orders={orders}/>
            )): 
            <div className={styles.empty}> 
              <BsClipboardX size={90}/>
              <p>No orders currently</p>
            </div>}
          </div> 

        </main>
      </div>
    </AuthenticatedRoute>
  )
}

export async function getServerSideProps(context){

  const cookies = nookies.get(context)

  console.log({cookies})

  if(!cookies.accessToken) {
    return {
      redirect:{
        permanent:false,
        destination:'/signin'
      }
    }
  }

  return{
    props:{
      cookies
    }
  }
}